name: Playwright Sharded Tests Options

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Test environment (prodCanada/ prod/ prodTest/ stage/ qa)"
        required: true
        default: "stage"
      test_pattern:
        description: "Test pattern (e.g., @smoke, @testDe|@derivedScores, (?=.*@RDGBAS)(?=.*@derivedScores), (?=.*@derivedScores)(?=.*(@PHNMAN|@RDGBAS)))"
        required: true
        default: "(?=.*@RDGBAS)(?=.*@derivedScores)"
      shard_count:
        description: "Number of shards"
        required: true
        default: "5"
        type: choice
        options:
          - "1"
          - "2"
          - "4"
          - "6"
          - "8"
          - "10"
          - "15"
      browser:
        description: "Browser to run tests on"
        required: true
        default: "chrome"
        type: choice
        options:
          - "chrome"
          - "firefox"
          - "webkit"
      num_retries:
        description: "Number of test retries"
        required: true
        default: "2"
        type: choice
        options:
          - "0"
          - "1"
          - "2"
          - "3"
      pre_run_notes:
        description: "Notes before running the tests (purpose, context, etc.)"
        required: false
        type: string

env:
  TEST_ENV: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'stage' }}
  NUM_RETRIES: ${{ github.event.inputs.num_retries }}
  SLOW_MODE_DELAY_IN_MS: 0
  CI: "true"
  PLAYWRIGHT_WORKERS: 1
  NODE_VERSION: "20"

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          case ${{ github.event.inputs.shard_count }} in
            "1")
              echo "matrix={\"shard\":[1]}" >> $GITHUB_OUTPUT
              ;;
            "2")
              echo "matrix={\"shard\":[1,2]}" >> $GITHUB_OUTPUT
              ;;
            "4")
              echo "matrix={\"shard\":[1,2,3,4]}" >> $GITHUB_OUTPUT
              ;;
            "6")
              echo "matrix={\"shard\":[1,2,3,4,5,6]}" >> $GITHUB_OUTPUT
              ;;
            "8")
              echo "matrix={\"shard\":[1,2,3,4,5,6,7,8]}" >> $GITHUB_OUTPUT
              ;;
            "10")
              echo "matrix={\"shard\":[1,2,3,4,5,6,7,8,9,10]}" >> $GITHUB_OUTPUT
              ;;
            "15")
              echo "matrix={\"shard\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "matrix={\"shard\":[1]}" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Save pre-run notes
        if: inputs.pre_run_notes != ''
        run: |
          mkdir -p run-metadata
          echo "${{ inputs.pre_run_notes }}" > run-metadata/pre-run-notes.txt

      - name: Upload pre-run notes
        if: inputs.pre_run_notes != ''
        uses: actions/upload-artifact@v4
        with:
          name: run-metadata
          path: run-metadata/
          retention-days: 30

  test:
    needs: prepare
    name: "Shard ${{ matrix.shard }}"
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.49.1-noble

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Collect System Information
        run: |
          mkdir -p system-info
          echo "=== System Information for Shard ${{ matrix.shard }} ===" > system-info/specs.txt
          echo "CPU Information:" >> system-info/specs.txt
          lscpu >> system-info/specs.txt
          echo -e "\nMemory Information:" >> system-info/specs.txt
          free -h >> system-info/specs.txt
          echo -e "\nDisk Information:" >> system-info/specs.txt
          df -h >> system-info/specs.txt
          echo -e "\nSystem Load:" >> system-info/specs.txt
          uptime >> system-info/specs.txt
          echo -e "\nContainer Information:" >> system-info/specs.txt
          cat /etc/os-release >> system-info/specs.txt

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install-deps

      - name: Install Playwright browsers
        run: npx playwright install ${{ inputs.browser }}

      - name: Run Playwright tests
        id: run_tests
        continue-on-error: true
        env:
          SHARD_COUNT: ${{ github.event.inputs.shard_count }}
          SHARD_NUMBER: ${{ matrix.shard }}
          CI: "true"
        run: |
          echo "Running shard ${{ matrix.shard }} of ${{ github.event.inputs.shard_count }}"

          npx cross-env test=${{ env.TEST_ENV }} npx playwright test \
            --grep '${{ github.event.inputs.test_pattern }}' \
            --project=${{ github.event.inputs.browser }} \
            --shard=${{ matrix.shard }}/${{ github.event.inputs.shard_count }} \
            --workers=1 \
            --retries=${{ env.NUM_RETRIES }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-shard-${{ matrix.shard }}
          path: |
            playwright-report/
            test-results/
            system-info/
          retention-days: 30

      - name: Create status file
        if: always()
        run: |
          mkdir -p test-status
          echo "${{ steps.run_tests.outcome }}" > test-status/status.txt
          echo "Shard: ${{ matrix.shard }}" >> test-status/status.txt
          echo "Environment: ${{ github.event.inputs.environment }}" >> test-status/status.txt
          echo "Browser: ${{ github.event.inputs.browser }}" >> test-status/status.txt
          echo "Test Pattern: ${{ github.event.inputs.test_pattern }}" >> test-status/status.txt
          echo "Retries: ${{ env.NUM_RETRIES }}" >> test-status/status.txt

      - name: Upload status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-status-shard-${{ matrix.shard }}
          path: test-status/
          retention-days: 30

  merge-reports:
    name: Merge Reports
    if: always()
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create merged report directory
        run: |
          mkdir -p merged-report
          current_date=$(date +%Y-%m-%d_%H-%M-%S)

          # Start of HTML file
          cat << EOF > merged-report/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Playwright Test Reports</title>
            <style>
              :root {
                --primary-color: #0366d6;
                --success-color: #28a745;
                --failure-color: #dc3545;
                --neutral-color: #6c757d;
              }
              
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
                line-height: 1.6;
                margin: 0;
                padding: 20px;
                background: #f8f9fa;
                color: #24292e;
              }
              
              .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                padding: 2rem;
                border-radius: 10px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              }
              
              h1 {
                color: var(--primary-color);
                border-bottom: 2px solid #eaecef;
                padding-bottom: 0.5rem;
                margin-bottom: 1.5rem;
              }
              
              .meta-info {
                background: #f6f8fa;
                padding: 1rem;
                border-radius: 6px;
                margin: 1rem 0;
                border: 1px solid #eaecef;
              }
              
              .meta-info p {
                margin: 0.5rem 0;
                display: flex;
                justify-content: space-between;
                align-items: center;
              }
              
              .meta-info strong {
                color: var(--neutral-color);
              }
              
              .report-container {
                margin: 2rem 0;
              }
              
              .report-wrapper {
                margin: 1rem 0;
                position: relative;
              }
              
              .report-link {
                display: block;
                padding: 1rem;
                background: white;
                border: 1px solid #e1e4e8;
                border-radius: 6px;
                text-decoration: none;
                color: var(--primary-color);
                position: relative;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: space-between;
              }
              
              .report-link:hover {
                border-color: var(--primary-color);
                background: #f6f8fa;
              }
              
              .expand-btn {
                background: none;
                border: none;
                cursor: pointer;
                font-size: 1.2rem;
                transition: transform 0.3s ease;
                padding: 0.5rem;
              }
              
              .expand-btn.active {
                transform: rotate(90deg);
              }
              
              .report-details {
                display: none;
                margin-top: 0.5rem;
                border: 1px solid #e1e4e8;
                border-radius: 0 0 6px 6px;
                overflow: hidden;
              }
              
              .report-details.show {
                display: block;
              }
              
              .report-details iframe {
                width: 100%;
                height: 600px;
                border: none;
              }
              
              .status-badge {
                padding: 0.25rem 0.75rem;
                border-radius: 2rem;
                font-size: 0.875rem;
                font-weight: 500;
                text-transform: uppercase;
              }
              
              .status-success {
                background: #e6ffed;
                color: var(--success-color);
              }
              
              .status-failure {
                background: #ffeef0;
                color: var(--failure-color);
              }
              
              .status-neutral {
                background: #f6f8fa;
                color: var(--neutral-color);
              }
              
              .system-info {
                background: #f8f9fa;
                padding: 1rem;
                border-radius: 6px;
                margin-top: 1rem;
                font-family: monospace;
                white-space: pre-wrap;
                max-height: 400px;
                overflow-y: auto;
                display: none;  /* Changed from block to none */
              }
              
              .system-info-header {
                background: #f1f3f5;
                padding: 0.5rem;
                border-bottom: 1px solid #e1e4e8;
              }
              
              .system-info-toggle {
                background: none;
                border: none;
                cursor: pointer;
                font-size: 1rem;
                color: #586069;
                padding: 0.5rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                transition: transform 0.2s ease;
              }
              
              .system-info-toggle.active {
                transform: rotate(90deg);
              }
              
              .notes-section {
                background: #fff3cd;
                border: 1px solid #ffeeba;
                padding: 1rem;
                border-radius: 6px;
                margin: 1rem 0;
              }
              
              .notes-section h3 {
                color: #856404;
                margin-top: 0;
              }
              
              .post-notes-form {
                background: #e9ecef;
                padding: 1rem;
                border-radius: 6px;
                margin: 1rem 0;
              }
              
              .post-notes-form textarea {
                width: 100%;
                min-height: 100px;
                margin: 0.5rem 0;
                padding: 0.5rem;
                border: 1px solid #ced4da;
                border-radius: 4px;
              }
              
              .post-notes-form button {
                background: var(--primary-color);
                color: white;
                border: none;
                padding: 0.5rem 1rem;
                border-radius: 4px;
                cursor: pointer;
              }
              
              .post-notes-form button:hover {
                background: #0056b3;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Playwright Test Reports</h1>
          EOF

          # Add pre-run notes if they exist
          if [ -f "all-artifacts/run-metadata/pre-run-notes.txt" ]; then
            echo "
              <div class='notes-section'>
                <h3>Pre-Run Notes</h3>
                <p>$(cat all-artifacts/run-metadata/pre-run-notes.txt)</p>
              </div>" >> merged-report/index.html
          fi

          # Add meta information
          echo "
              <div class='meta-info'>
                <p><strong>Environment:</strong> ${{ inputs.environment }}</p>
                <p><strong>Browser:</strong> ${{ inputs.browser }}</p>
                <p><strong>Test Pattern:</strong> ${{ inputs.test_pattern }}</p>
                <p><strong>Total Shards:</strong> ${{ inputs.shard_count }}</p>
                <p><strong>Retries:</strong> ${{ inputs.num_retries }}</p>
                <p><strong>Last Updated:</strong> $current_date</p>
              </div>
              <div class='report-container'>" >> merged-report/index.html

          # Process each shard's report and system info
          for ((i=1; i<=${{ inputs.shard_count }}; i++)); do
            report_source="all-artifacts/playwright-report-shard-$i"
            status_file="all-artifacts/test-status-shard-$i/status.txt"
            system_info_file="$report_source/system-info/specs.txt"
            
            if [ -d "$report_source" ]; then
              mkdir -p "merged-report/shard-$i"
              cp -r "$report_source"/* "merged-report/shard-$i/"
              
              status="N/A"
              status_class="status-neutral"
              if [ -f "$status_file" ]; then
                status=$(head -n 1 "$status_file")
                if [ "$status" = "success" ]; then
                  status_class="status-success"
                else
                  status_class="status-failure"
                fi
              fi
              
              # Read system info
              system_info="System information not available"
              if [ -f "$system_info_file" ]; then
                system_info=$(cat "$system_info_file")
              fi
              
              echo "
              <div class='report-wrapper'>
                <div class='report-link'>
                  <span>Shard $i Report</span>
                  <div>
                    <span class='status-badge ${status_class}'>$status</span>
                    <button class='expand-btn' data-shard='$i'>➤</button>
                  </div>
                </div>

                <div class='report-details' id='shard-$i-details'>
                  <div class='system-info-header'>
                    <button class='system-info-toggle' data-shard='$i'>
                      ➤ System Information
                    </button>
                  </div>
                  <div class='system-info' id='system-info-$i'>
                    <pre>$system_info</pre>
                  </div>
                  <iframe src='./shard-$i/playwright-report/index.html'></iframe>
                </div>
              </div>" >> merged-report/index.html
            fi
          done

          # Add post-notes form
          echo "
              <div class='post-notes-form'>
                <h3>Add Post-Run Notes</h3>
                <form id='postNotesForm'>
                  <textarea id='postNotes' placeholder='Enter your observations and notes about this test run...'></textarea>
                  <button type='submit'>Save Notes</button>
                </form>
              </div>" >> merged-report/index.html

          # Add JavaScript for interactivity
          echo "
          <script>
            document.querySelectorAll('.system-info-toggle').forEach(toggle => {
              toggle.addEventListener('click', (e) => {
                const shardNum = e.currentTarget.dataset.shard;
                const systemInfo = document.getElementById('system-info-' + shardNum);
                const toggleBtn = e.currentTarget;

                systemInfo.classList.toggle('show');
                toggleBtn.classList.toggle('active');
              });
            });

            document.querySelectorAll('.report-link').forEach(link => {
              link.addEventListener('click', (e) => {
                const shardNum = e.currentTarget.querySelector('.expand-btn').dataset.shard;
                const detailsContainer = document.getElementById('shard-' + shardNum + '-details');
                const expandBtn = e.currentTarget.querySelector('.expand-btn');
                
                // If clicked on the expand button
                if (e.target.classList.contains('expand-btn')) {
                  detailsContainer.classList.toggle('show');
                  expandBtn.classList.toggle('active');
                } 
                // If clicked on the main link, navigate to the report
                else if (!e.target.classList.contains('expand-btn')) {
                  window.open('./shard-' + shardNum + '/playwright-report/index.html', '_blank');
                }
              });
            });

            // Handle post-run notes
            document.getElementById('postNotesForm').addEventListener('submit', function(e) {
              e.preventDefault();
              const notes = document.getElementById('postNotes').value;
              
              // Save notes to localStorage with timestamp
              const savedNotes = {
                text: notes,
                timestamp: new Date().toISOString(),
                runId: '${{ github.run_id }}'
              };
              
              const allNotes = JSON.parse(localStorage.getItem('playwrightTestNotes') || '[]');
              allNotes.push(savedNotes);
              localStorage.setItem('playwrightTestNotes', JSON.stringify(allNotes));
              
              // Show saved notes
              const notesSection = document.createElement('div');
              notesSection.className = 'notes-section';
              notesSection.innerHTML = '<h3>Post-Run Notes</h3><p>' + notes + '</p>';
              
              const form = document.querySelector('.post-notes-form');
              form.parentNode.insertBefore(notesSection, form);
              
              // Clear the form
              document.getElementById('postNotes').value = '';
              
              alert('Notes saved successfully!');
            });

            // Load existing notes for this run
            window.addEventListener('load', function() {
              const allNotes = JSON.parse(localStorage.getItem('playwrightTestNotes') || '[]');
              const runNotes = allNotes.filter(note => note.runId === '${{ github.run_id }}');
              
              runNotes.forEach(note => {
                const notesSection = document.createElement('div');
                notesSection.className = 'notes-section';
                notesSection.innerHTML = '<h3>Post-Run Notes</h3><p>' + note.text + '</p>';
                
                const form = document.querySelector('.post-notes-form');
                form.parentNode.insertBefore(notesSection, form);
              });
            });
          </script>
          </div></div></body></html>" >> merged-report/index.html

      - name: Upload merged report artifact
        uses: actions/upload-artifact@v4
        with:
          name: merged-playwright-report
          path: merged-report/
          retention-days: 30

  deploy-report:
    name: Deploy Report to GitHub Pages
    if: always()
    needs: merge-reports
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # Update the generate-path step with more robust path generation
      - name: Generate deployment path
        id: generate-path
        run: |
          # Only use the run number for the deployment path
          DEPLOY_PATH="${GITHUB_RUN_NUMBER}"
          echo "deploy_path=$DEPLOY_PATH" >> $GITHUB_OUTPUT
          echo "Deployment path will be: $DEPLOY_PATH"

      - name: Download merged report
        uses: actions/download-artifact@v4
        with:
          name: merged-playwright-report
          path: merged-report

      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Update the prepare deployment structure step
      - name: Prepare deployment structure
        run: |
          # Create base directory structure
          mkdir -p github-pages
          DEPLOY_DIR="github-pages/${{ steps.generate-path.outputs.deploy_path }}"
          mkdir -p "$DEPLOY_DIR"

          # Move merged report to deployment directory
          mv merged-report/* "$DEPLOY_DIR/" || {
            echo "Failed to move report files"
            exit 1
          }

          # Create/Update main index.html
          cat << 'EOF' > github-pages/index.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>Playwright Test Reports History</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 1200px;
                margin: 0 auto;
                padding: 2rem;
                background: #f8f9fa;
              }
              .header {
                background: white;
                padding: 1.5rem;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                margin-bottom: 2rem;
              }
              .report-list {
                list-style: none;
                padding: 0;
                margin: 0;
              }
              .report-item {
                background: white;
                margin: 1rem 0;
                padding: 1rem;
                border-radius: 6px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                transition: transform 0.2s;
              }
              .report-item:hover {
                transform: translateY(-2px);
              }
              .report-link {
                display: flex;
                justify-content: space-between;
                align-items: center;
                text-decoration: none;
                color: #0366d6;
              }
              .report-date {
                color: #6a737d;
                font-size: 0.9rem;
              }
              .retention-notice {
                background: #fff3cd;
                border: 1px solid #ffeeba;
                padding: 1rem;
                border-radius: 6px;
                margin-top: 2rem;
                color: #856404;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>Playwright Test Reports</h1>
              <p>Historical test reports for the last 30 days</p>
            </div>
            <ul class="report-list">
              <!-- Report entries will be inserted here -->
            </ul>
            <div class="retention-notice">
              <p>Note: Reports are retained for 30 days from their creation date.</p>
            </div>
          </body>
          </html>
          EOF

      # Update the index generation step
      - name: Update reports index
        run: |
          cd github-pages

          # Get repository name from GITHUB_REPOSITORY
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)

          # Find all report directories and sort by run number (newest first)
          dirs=$(find . -maxdepth 1 -type d -name "[0-9]*" | sort -rV)

          # Calculate date 30 days ago for cleanup
          cleanup_date=$(date -d "30 days ago" +%Y%m%d)

          # Process each directory
          for dir in $dirs; do
            # Remove leading ./
            dir=${dir#./}

            # Extract run number from directory name
            run_number=$dir

            # Insert entry into index.html with repository name in path
            sed -i "/<ul class=\"report-list\">/a \        <li class=\"report-item\"><a class=\"report-link\" href=\"/${REPO_NAME}/${run_number}/index.html\"><span>Report: ${run_number}</span></a></li>" index.html
          done

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: github-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

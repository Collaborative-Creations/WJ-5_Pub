name: Playwright Sharded Tests with Historical Reports

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Test environment (prodCanada/ prod/ prodTest/ stage/ qa)"
        required: true
        default: "stage"
      test_pattern:
        description: "Test pattern (e.g., @smoke, @testDe|@derivedScores, (?=.*@RDGBAS)(?=.*@derivedScores), (?=.*@derivedScores)(?=.*(@PHNMAN|@RDGBAS)))"
        required: true
        default: "(?=.*@RDGBAS)(?=.*@derivedScores)"
      shard_count:
        description: "Number of shards"
        required: true
        default: "5"
        type: choice
        options:
          - "1"
          - "2"
          - "4"
          - "6"
          - "8"
          - "10"
          - "15"
      browser:
        description: "Browser to run tests on"
        required: true
        default: "chrome"
        type: choice
        options:
          - "chrome"
          - "firefox"
          - "webkit"
      num_retries:
        description: "Number of test retries"
        required: true
        default: "2"
        type: choice
        options:
          - "0"
          - "1"
          - "2"
          - "3"
      pre_run_notes:
        description: "Notes before running the tests (purpose, context, etc.)"
        required: false
        type: string

env:
  TEST_ENV: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'stage' }}
  NUM_RETRIES: ${{ github.event.inputs.num_retries }}
  SLOW_MODE_DELAY_IN_MS: 0
  CI: "true"
  PLAYWRIGHT_WORKERS: 1
  NODE_VERSION: "20"

permissions:
  contents: write
  pages: write
  id-token: write

# Keep the existing jobs (prepare, test, merge-reports) unchanged
# Only modify the deploy-report job

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          case ${{ github.event.inputs.shard_count }} in
            "1")
              echo "matrix={\"shard\":[1]}" >> $GITHUB_OUTPUT
              ;;
            "2")
              echo "matrix={\"shard\":[1,2]}" >> $GITHUB_OUTPUT
              ;;
            "4")
              echo "matrix={\"shard\":[1,2,3,4]}" >> $GITHUB_OUTPUT
              ;;
            "6")
              echo "matrix={\"shard\":[1,2,3,4,5,6]}" >> $GITHUB_OUTPUT
              ;;
            "8")
              echo "matrix={\"shard\":[1,2,3,4,5,6,7,8]}" >> $GITHUB_OUTPUT
              ;;
            "10")
              echo "matrix={\"shard\":[1,2,3,4,5,6,7,8,9,10]}" >> $GITHUB_OUTPUT
              ;;
            "15")
              echo "matrix={\"shard\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "matrix={\"shard\":[1]}" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Save pre-run notes
        if: inputs.pre_run_notes != ''
        run: |
          mkdir -p run-metadata
          echo "${{ inputs.pre_run_notes }}" > run-metadata/pre-run-notes.txt

      - name: Upload pre-run notes
        if: inputs.pre_run_notes != ''
        uses: actions/upload-artifact@v4
        with:
          name: run-metadata
          path: run-metadata/
          retention-days: 30

  test:
    needs: prepare
    name: "Shard ${{ matrix.shard }}"
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.49.1-noble

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Collect System Information
        run: |
          mkdir -p system-info
          echo "=== System Information for Shard ${{ matrix.shard }} ===" > system-info/specs.txt
          echo "CPU Information:" >> system-info/specs.txt
          lscpu >> system-info/specs.txt
          echo -e "\nMemory Information:" >> system-info/specs.txt
          free -h >> system-info/specs.txt
          echo -e "\nDisk Information:" >> system-info/specs.txt
          df -h >> system-info/specs.txt
          echo -e "\nSystem Load:" >> system-info/specs.txt
          uptime >> system-info/specs.txt
          echo -e "\nContainer Information:" >> system-info/specs.txt
          cat /etc/os-release >> system-info/specs.txt

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install-deps

      - name: Install Playwright browsers
        run: npx playwright install ${{ inputs.browser }}

      - name: Run Playwright tests
        id: run_tests
        continue-on-error: true
        env:
          SHARD_COUNT: ${{ github.event.inputs.shard_count }}
          SHARD_NUMBER: ${{ matrix.shard }}
          CI: "true"
        run: |
          echo "Running shard ${{ matrix.shard }} of ${{ github.event.inputs.shard_count }}"

          npx cross-env test=${{ env.TEST_ENV }} npx playwright test \
            --grep '${{ github.event.inputs.test_pattern }}' \
            --project=${{ github.event.inputs.browser }} \
            --shard=${{ matrix.shard }}/${{ github.event.inputs.shard_count }} \
            --workers=1 \
            --retries=${{ env.NUM_RETRIES }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-shard-${{ matrix.shard }}
          path: |
            playwright-report/
            test-results/
            system-info/
          retention-days: 30

      - name: Create status file
        if: always()
        run: |
          mkdir -p test-status
          echo "${{ steps.run_tests.outcome }}" > test-status/status.txt
          echo "Shard: ${{ matrix.shard }}" >> test-status/status.txt
          echo "Environment: ${{ github.event.inputs.environment }}" >> test-status/status.txt
          echo "Browser: ${{ github.event.inputs.browser }}" >> test-status/status.txt
          echo "Test Pattern: ${{ github.event.inputs.test_pattern }}" >> test-status/status.txt
          echo "Retries: ${{ env.NUM_RETRIES }}" >> test-status/status.txt

      - name: Upload status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-status-shard-${{ matrix.shard }}
          path: test-status/
          retention-days: 30

  merge-reports:
    name: Merge Reports
    if: always()
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create merged report directory
        run: |
          mkdir -p merged-report
          current_date=$(date +%Y-%m-%d_%H-%M-%S)

          # Start of HTML file
          cat << EOF > merged-report/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Playwright Test Reports</title>
            <style>
              :root {
                --primary-color: #0366d6;
                --success-color: #28a745;
                --failure-color: #dc3545;
                --neutral-color: #6c757d;
              }
              
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
                line-height: 1.6;
                margin: 0;
                padding: 20px;
                background: #f8f9fa;
                color: #24292e;
              }
              
              .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                padding: 2rem;
                border-radius: 10px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              }
              
              h1 {
                color: var(--primary-color);
                border-bottom: 2px solid #eaecef;
                padding-bottom: 0.5rem;
                margin-bottom: 1.5rem;
              }
              
              .meta-info {
                background: #f6f8fa;
                padding: 1rem;
                border-radius: 6px;
                margin: 1rem 0;
                border: 1px solid #eaecef;
              }
              
              .meta-info p {
                margin: 0.5rem 0;
                display: flex;
                justify-content: space-between;
                align-items: center;
              }
              
              .meta-info strong {
                color: var(--neutral-color);
              }
              
              .report-container {
                margin: 2rem 0;
              }
              
              .report-wrapper {
                margin: 1rem 0;
                position: relative;
              }
              
              .report-link {
                display: block;
                padding: 1rem;
                background: white;
                border: 1px solid #e1e4e8;
                border-radius: 6px;
                text-decoration: none;
                color: var(--primary-color);
                position: relative;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: space-between;
              }
              
              .report-link:hover {
                border-color: var(--primary-color);
                background: #f6f8fa;
              }
              
              .expand-btn {
                background: none;
                border: none;
                cursor: pointer;
                font-size: 1.2rem;
                transition: transform 0.3s ease;
                padding: 0.5rem;
              }
              
              .expand-btn.active {
                transform: rotate(90deg);
              }
              
              .report-details {
                display: none;
                margin-top: 0.5rem;
                border: 1px solid #e1e4e8;
                border-radius: 0 0 6px 6px;
                overflow: hidden;
              }
              
              .report-details.show {
                display: block;
              }
              
              .report-details iframe {
                width: 100%;
                height: 600px;
                border: none;
              }
              
              .status-badge {
                padding: 0.25rem 0.75rem;
                border-radius: 2rem;
                font-size: 0.875rem;
                font-weight: 500;
                text-transform: uppercase;
              }
              
              .status-success {
                background: #e6ffed;
                color: var(--success-color);
              }
              
              .status-failure {
                background: #ffeef0;
                color: var(--failure-color);
              }
              
              .status-neutral {
                background: #f6f8fa;
                color: var(--neutral-color);
              }
              
              .system-info {
                background: #f8f9fa;
                padding: 1rem;
                border-radius: 6px;
                margin-top: 1rem;
                font-family: monospace;
                white-space: pre-wrap;
                max-height: 400px;
                overflow-y: auto;
                display: none;  /* Changed from block to none */
              }
              
              .system-info-header {
                background: #f1f3f5;
                padding: 0.5rem;
                border-bottom: 1px solid #e1e4e8;
              }
              
              .system-info-toggle {
                background: none;
                border: none;
                cursor: pointer;
                font-size: 1rem;
                color: #586069;
                padding: 0.5rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
              }

              .system-info-toggle .toggle-arrow {
                display: inline-block;
                transition: transform 0.2s ease;
              }

              .system-info-toggle.active .toggle-arrow {
                transform: rotate(90deg);
              }
              
              .notes-section {
                background: #fff3cd;
                border: 1px solid #ffeeba;
                padding: 1rem;
                border-radius: 6px;
                margin: 1rem 0;
              }
              
              .notes-section h3 {
                color: #856404;
                margin-top: 0;
              }
              
              .post-notes-form {
                background: #e9ecef;
                padding: 1rem;
                border-radius: 6px;
                margin: 1rem 0;
              }
              
              .post-notes-form textarea {
                width: 100%;
                min-height: 100px;
                margin: 0.5rem 0;
                padding: 0.5rem;
                border: 1px solid #ced4da;
                border-radius: 4px;
              }
              
              .post-notes-form button {
                background: var(--primary-color);
                color: white;
                border: none;
                padding: 0.5rem 1rem;
                border-radius: 4px;
                cursor: pointer;
              }
              
              .post-notes-form button:hover {
                background: #0056b3;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Playwright Test Reports</h1>
          EOF

          # Add pre-run notes if they exist
          if [ -f "all-artifacts/run-metadata/pre-run-notes.txt" ]; then
            echo "
              <div class='notes-section'>
                <h3>Pre-Run Notes</h3>
                <p>$(cat all-artifacts/run-metadata/pre-run-notes.txt)</p>
              </div>" >> merged-report/index.html
          fi

          # Add meta information
          echo "
              <div class='meta-info'>
                <p><strong>Environment:</strong> ${{ inputs.environment }}</p>
                <p><strong>Browser:</strong> ${{ inputs.browser }}</p>
                <p><strong>Test Pattern:</strong> ${{ inputs.test_pattern }}</p>
                <p><strong>Total Shards:</strong> ${{ inputs.shard_count }}</p>
                <p><strong>Retries:</strong> ${{ inputs.num_retries }}</p>
                <p><strong>Last Updated:</strong> $current_date</p>
              </div>
              <div class='report-container'>" >> merged-report/index.html

          # Process each shard's report and system info
          for ((i=1; i<=${{ inputs.shard_count }}; i++)); do
            report_source="all-artifacts/playwright-report-shard-$i"
            status_file="all-artifacts/test-status-shard-$i/status.txt"
            system_info_file="$report_source/system-info/specs.txt"
            
            if [ -d "$report_source" ]; then
              mkdir -p "merged-report/shard-$i"
              cp -r "$report_source"/* "merged-report/shard-$i/"
              
              status="N/A"
              status_class="status-neutral"
              if [ -f "$status_file" ]; then
                status=$(head -n 1 "$status_file")
                if [ "$status" = "success" ]; then
                  status_class="status-success"
                else
                  status_class="status-failure"
                fi
              fi
              
              # Read system info
              system_info="System information not available"
              if [ -f "$system_info_file" ]; then
                system_info=$(cat "$system_info_file")
              fi
              
              echo "
              <div class='report-wrapper'>
                <div class='report-link'>
                  <span>Shard $i Report</span>
                  <div>
                    <span class='status-badge ${status_class}'>$status</span>
                    <button class='expand-btn' data-shard='$i'>➤</button>
                  </div>
                </div>

                <div class='report-details' id='shard-$i-details'>
                  <div class='system-info-header'>
                 <button class='system-info-toggle' data-shard='$i'>
                   <span class="toggle-arrow">➤</span> System Information
                 </button>
                  </div>
                  <div class='system-info' id='system-info-$i'>
                    <pre>$system_info</pre>
                  </div>
                  <iframe src='./shard-$i/playwright-report/index.html'></iframe>
                </div>
              </div>" >> merged-report/index.html
            fi
          done

          # Add post-notes form
          echo "
              <div class='post-notes-form'>
                <h3>Add Post-Run Notes</h3>
                <form id='postNotesForm'>
                  <textarea id='postNotes' placeholder='Enter your observations and notes about this test run...'></textarea>
                  <button type='submit'>Save Notes</button>
                </form>
              </div>" >> merged-report/index.html

          # Add JavaScript for interactivity
          echo "
          <script>
            document.querySelectorAll('.system-info-toggle').forEach(toggle => {
              toggle.addEventListener('click', (e) => {
                const shardNum = e.currentTarget.dataset.shard;
                const systemInfo = document.getElementById('system-info-' + shardNum);
                const toggleBtn = e.currentTarget;
                    
                // Toggle visibility
                if (systemInfo.style.display === 'block') {
                  systemInfo.style.display = 'none';
                } else {
                  systemInfo.style.display = 'block';
                }
                
                // Toggle active class for styling
                toggleBtn.classList.toggle('active');
              });
            });

            document.querySelectorAll('.report-link').forEach(link => {
              link.addEventListener('click', (e) => {
                const shardNum = e.currentTarget.querySelector('.expand-btn').dataset.shard;
                const detailsContainer = document.getElementById('shard-' + shardNum + '-details');
                const expandBtn = e.currentTarget.querySelector('.expand-btn');
                
                // If clicked on the expand button
                if (e.target.classList.contains('expand-btn')) {
                  detailsContainer.classList.toggle('show');
                  expandBtn.classList.toggle('active');
                } 
                // If clicked on the main link, navigate to the report
                else if (!e.target.classList.contains('expand-btn')) {
                  window.open('./shard-' + shardNum + '/playwright-report/index.html', '_blank');
                }
              });
            });

            // Handle post-run notes
            document.getElementById('postNotesForm').addEventListener('submit', function(e) {
              e.preventDefault();
              const notes = document.getElementById('postNotes').value;
              
              // Save notes to localStorage with timestamp
              const savedNotes = {
                text: notes,
                timestamp: new Date().toISOString(),
                runId: '${{ github.run_id }}'
              };
              
              const allNotes = JSON.parse(localStorage.getItem('playwrightTestNotes') || '[]');
              allNotes.push(savedNotes);
              localStorage.setItem('playwrightTestNotes', JSON.stringify(allNotes));
              
              // Show saved notes
              const notesSection = document.createElement('div');
              notesSection.className = 'notes-section';
              notesSection.innerHTML = '<h3>Post-Run Notes</h3><p>' + notes + '</p>';
              
              const form = document.querySelector('.post-notes-form');
              form.parentNode.insertBefore(notesSection, form);
              
              // Clear the form
              document.getElementById('postNotes').value = '';
              
              alert('Notes saved successfully!');
            });

            // Load existing notes for this run
            window.addEventListener('load', function() {
              const allNotes = JSON.parse(localStorage.getItem('playwrightTestNotes') || '[]');
              const runNotes = allNotes.filter(note => note.runId === '${{ github.run_id }}');
              
              runNotes.forEach(note => {
                const notesSection = document.createElement('div');
                notesSection.className = 'notes-section';
                notesSection.innerHTML = '<h3>Post-Run Notes</h3><p>' + note.text + '</p>';
                
                const form = document.querySelector('.post-notes-form');
                form.parentNode.insertBefore(notesSection, form);
              });
            });
          </script>
          </div></div></body></html>" >> merged-report/index.html

      - name: Upload merged report artifact
        uses: actions/upload-artifact@v4
        with:
          name: merged-playwright-report
          path: merged-report/
          retention-days: 30

  # The deploy-report job is completely rewritten
  deploy-report:
    name: Deploy Report to GitHub Pages
    timeout-minutes: 10 # Add timeout
    if: always()
    needs: merge-reports
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Set Run Info
        id: run-info
        run: |
          echo "run_number=$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create Run Metadata
        run: |
          mkdir -p new-report/metadata
          echo "{\"runNumber\": \"${{ steps.run-info.outputs.run_number }}\", \"timestamp\": \"${{ steps.run-info.outputs.timestamp }}\"}" > new-report/metadata/run-info.json

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 0 # Get full history
          token: ${{ secrets.GH_PAT }}

      - name: Initialize gh-pages if needed
        run: |
          if [ ! -d "gh-pages" ]; then
            mkdir -p gh-pages
            cd gh-pages
            git init
            git checkout -b gh-pages
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            echo "Initializing gh-pages branch..."
          fi

      - name: Download merged report
        uses: actions/download-artifact@v4
        with:
          name: merged-playwright-report
          path: new-report

      - name: Organize reports
        run: |
          cd gh-pages

          # Create directory for new report
          mkdir -p "reports/${{ steps.run-info.outputs.run_number }}"
          cp -R ../new-report/* "reports/${{ steps.run-info.outputs.run_number }}/"

          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

          # Collect information about all existing reports
          REPORTS_DATA=""
          if [ -d "reports" ]; then
            for RUN_DIR in reports/*; do
              if [ -d "$RUN_DIR" ]; then
                METADATA_FILE="$RUN_DIR/metadata/run-info.json"
                STATUS_FILE="$RUN_DIR/test-status-shard-1/status.txt"
                
                # Default values
                RUN_NUM=$(basename "$RUN_DIR")
                TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                ENV="N/A"
                BROWSER="N/A"
                TEST_PATTERN="N/A"
                
                # Get timestamp and run number from metadata
                if [ -f "$METADATA_FILE" ]; then
                  RUN_NUM=$(jq -r '.runNumber' "$METADATA_FILE")
                  TIMESTAMP=$(jq -r '.timestamp' "$METADATA_FILE")
                fi
                
                # Try to extract test parameters from any shard status file
                for SHARD_STATUS in $RUN_DIR/test-status-shard-*/status.txt; do
                  if [ -f "$SHARD_STATUS" ]; then
                    # Extract environment, browser, test pattern from status file
                    ENV_LINE=$(grep "Environment:" "$SHARD_STATUS" | head -1)
                    BROWSER_LINE=$(grep "Browser:" "$SHARD_STATUS" | head -1)
                    PATTERN_LINE=$(grep "Test Pattern:" "$SHARD_STATUS" | head -1)
                    
                    if [ ! -z "$ENV_LINE" ]; then
                      ENV=$(echo "$ENV_LINE" | cut -d':' -f2- | xargs)
                    fi
                    if [ ! -z "$BROWSER_LINE" ]; then
                      BROWSER=$(echo "$BROWSER_LINE" | cut -d':' -f2- | xargs)
                    fi
                    if [ ! -z "$PATTERN_LINE" ]; then
                      TEST_PATTERN=$(echo "$PATTERN_LINE" | cut -d':' -f2- | xargs)
                    fi
                    
                    # Only need to process one status file
                    break
                  fi
                done
                
                # Escape quotes in test pattern for JavaScript
                TEST_PATTERN_ESCAPED=$(echo "$TEST_PATTERN" | sed 's/"/\\"/g')
                
                REPORTS_DATA="${REPORTS_DATA}addReportEntry('$RUN_NUM', '$TIMESTAMP', '$ENV', '$BROWSER', '$TEST_PATTERN_ESCAPED');\n    "
              fi
            done
          fi

          # Add current run's environment info
          ENV="${{ github.event.inputs.environment }}"
          BROWSER="${{ github.event.inputs.browser }}"
          TEST_PATTERN="${{ github.event.inputs.test_pattern }}"
          TEST_PATTERN_ESCAPED=$(echo "$TEST_PATTERN" | sed 's/"/\\"/g')

          # Add current run
          CURRENT_TIMESTAMP="${{ steps.run-info.outputs.timestamp }}"
          REPORTS_DATA="${REPORTS_DATA}addReportEntry('${{ steps.run-info.outputs.run_number }}', '$CURRENT_TIMESTAMP', '$ENV', '$BROWSER', '$TEST_PATTERN_ESCAPED');"



          # Create or update main index
          cat > index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>Playwright Test Reports History</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
              body {
                font-family: -apple-system, system-ui, sans-serif;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                background: #f6f8fa;
              }
              .header {
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                margin-bottom: 20px;
              }
              .reports-container {
                display: grid;
                gap: 15px;
                grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
              }
              .report-card {
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                transition: transform 0.2s;
              }
              .report-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
              }
              .report-link {
                text-decoration: none;
                color: #0366d6;
              }
              .report-meta {
                color: #586069;
                font-size: 0.9em;
                margin-top: 10px;
              }
              .report-meta-item {
                display: flex;
                margin-bottom: 4px;
              }
              .report-meta-label {
                width: 110px;
                font-weight: 500;
                color: #24292e;
              }
              .report-meta-value {
                flex: 1;
                word-break: break-word;
              }
              .filter-bar {
                background: white;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
                display: flex;
                gap: 10px;
                align-items: center;
                flex-wrap: wrap;
              }
              .search-input {
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                flex: 1;
              }
              .sort-select {
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
              }
              .truncate {
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                max-width: 100%;
              }
              .time-display {
                color: #0366d6;
                font-weight: 500;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>Playwright Test Reports History</h1>
              <p>Historical test execution reports with retention</p>
            </div>
            
            <div class="filter-bar">
              <input type="text" class="search-input" placeholder="Search reports (run #, environment, browser, test pattern)..." id="searchInput">
              <select class="sort-select" id="sortSelect">
                <option value="newest">Newest First</option>
                <option value="oldest">Oldest First</option>
              </select>
              <select class="sort-select" id="envFilter">
                <option value="all">All Environments</option>
              </select>
              <select class="sort-select" id="browserFilter">
                <option value="all">All Browsers</option>
              </select>
            </div>
            
            <div class="reports-container" id="reportsContainer">
              <!-- Report entries will be dynamically inserted here -->
            </div>
            
            <script>
              // Store all report data for filtering
              const allReports = [];
              
              // Timezone for Indian Standard Time (IST)
              const istOptions = { 
                timeZone: 'Asia/Kolkata',
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: true
              };
              
              // Function to add a new report entry
              function addReportEntry(runNumber, timestamp, environment, browser, testPattern) {
                // Store data for filtering
                allReports.push({
                  runNumber,
                  timestamp,
                  environment,
                  browser,
                  testPattern
                });
                
                // Update filter dropdowns
                updateFilterOptions();
                
                // Initial rendering happens in renderReports()
              }
              
              // Function to render all reports based on current filters
              function renderReports() {
                const container = document.getElementById('reportsContainer');
                container.innerHTML = '';
                
                // Get current filters
                const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                const sortOrder = document.getElementById('sortSelect').value;
                const envFilter = document.getElementById('envFilter').value;
                const browserFilter = document.getElementById('browserFilter').value;
                
                // Filter and sort reports
                const filteredReports = allReports.filter(report => {
                  // Filter by search term
                  const searchable = `${report.runNumber} ${report.environment} ${report.browser} ${report.testPattern}`.toLowerCase();
                  const matchesSearch = searchTerm === '' || searchable.includes(searchTerm);
                  
                  // Filter by environment and browser
                  const matchesEnv = envFilter === 'all' || report.environment === envFilter;
                  const matchesBrowser = browserFilter === 'all' || report.browser === browserFilter;
                  
                  return matchesSearch && matchesEnv && matchesBrowser;
                });
                
                // Sort reports
                filteredReports.sort((a, b) => {
                  const aNum = parseInt(a.runNumber);
                  const bNum = parseInt(b.runNumber);
                  return sortOrder === 'newest' ? bNum - aNum : aNum - bNum;
                });
                
                // Render each report card
                filteredReports.forEach(report => {
                  const card = document.createElement('div');
                  card.className = 'report-card';
                  
                  // Format dates in IST
                  let formattedDate = "Unknown date";
                  try {
                    // Parse date from timestamp format YYYYMMDD_HHMMSS
                    let dateObj = new Date();
                    if (report.timestamp.includes('_')) {
                      const [datePart, timePart] = report.timestamp.split('_');
                      const dateString = `${datePart.slice(0,4)}-${datePart.slice(4,6)}-${datePart.slice(6,8)}T${timePart.slice(0,2)}:${timePart.slice(2,4)}:${timePart.slice(4,6)}Z`;
                      dateObj = new Date(dateString);
                    } else {
                      dateObj = new Date(report.timestamp);
                    }
                    formattedDate = dateObj.toLocaleString('en-IN', istOptions);
                  } catch (error) {
                    console.error("Date parsing error:", error);
                  }
                  
                  // Handle potentially long test patterns
                  const displayTestPattern = report.testPattern.length > 45 ? 
                    report.testPattern.substring(0, 45) + '...' : 
                    report.testPattern;
                    
                  card.innerHTML = `
                    <a href="./reports/${report.runNumber}/index.html" class="report-link">
                      <h3>Run #${report.runNumber}</h3>
                    </a>
                    <div class="report-meta">
                      <div class="report-meta-item">
                        <div class="report-meta-label">Environment:</div>
                        <div class="report-meta-value">${report.environment}</div>
                      </div>
                      <div class="report-meta-item">
                        <div class="report-meta-label">Browser:</div>
                        <div class="report-meta-value">${report.browser}</div>
                      </div>
                      <div class="report-meta-item">
                        <div class="report-meta-label">Test Pattern:</div>
                        <div class="report-meta-value truncate" title="${report.testPattern}">${displayTestPattern}</div>
                      </div>
                      <div class="report-meta-item">
                        <div class="report-meta-label">Executed:</div>
                        <div class="report-meta-value time-display">${formattedDate}</div>
                      </div>
                    </div>
                  `;
                    
                  container.appendChild(card);
                });
              }
              
              // Update filter dropdown options
              function updateFilterOptions() {
                const envFilter = document.getElementById('envFilter');
                const browserFilter = document.getElementById('browserFilter');
                
                // Get unique environments and browsers
                const environments = [...new Set(allReports.map(r => r.environment))].filter(e => e !== 'N/A').sort();
                const browsers = [...new Set(allReports.map(r => r.browser))].filter(b => b !== 'N/A').sort();
                
                // Clear existing options (except first one)
                while (envFilter.options.length > 1) {
                  envFilter.remove(1);
                }
                
                while (browserFilter.options.length > 1) {
                  browserFilter.remove(1);
                }
                
                // Add environment options
                environments.forEach(env => {
                  const option = document.createElement('option');
                  option.value = env;
                  option.textContent = env;
                  envFilter.appendChild(option);
                });
                
                // Add browser options
                browsers.forEach(browser => {
                  const option = document.createElement('option');
                  option.value = browser;
                  option.textContent = browser;
                  browserFilter.appendChild(option);
                });
              }
            
              // Add event listeners for filtering and sorting
              document.getElementById('searchInput').addEventListener('input', renderReports);
              document.getElementById('sortSelect').addEventListener('change', renderReports);
              document.getElementById('envFilter').addEventListener('change', renderReports);
              document.getElementById('browserFilter').addEventListener('change', renderReports);
            
              // Render reports on load (after all entries have been added)
              window.onload = function() {
                renderReports();
              };
            </script>
          </body>
          </html>
          EOF

      - name: Configure Git
        run: |
          cd gh-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git

      - name: Commit and Push Changes
        run: |
          cd gh-pages

          # Ensure we're on the right branch
          git fetch origin gh-pages
          git checkout gh-pages

          # Check for changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing..."
            
            # Try to commit and push
            git add .
            git commit -m "Add test report for run #${{ steps.run-info.outputs.run_number }}"
            
            # Attempt to push, with retry logic
            MAX_RETRIES=3
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if git push origin gh-pages; then
                echo "Successfully pushed changes"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT+1))
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "Failed to push after $MAX_RETRIES attempts"
                  exit 1
                fi
                echo "Push failed, attempt $RETRY_COUNT of $MAX_RETRIES. Retrying..."
                git pull --rebase origin gh-pages
                sleep 5
              fi
            done
          else
            echo "No changes to commit"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
